//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: AuthService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `AuthServiceClient`, then call methods of this protocol to make API calls.
internal protocol AuthServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: AuthServiceClientInterceptorFactoryProtocol? { get }

  func authorize(
    _ request: AuthRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<AuthRequest, AuthResponse>

  func verifyOtp(
    _ request: AuthVerify,
    callOptions: CallOptions?
  ) -> UnaryCall<AuthVerify, AuthResponse>
}

extension AuthServiceClientProtocol {
  internal var serviceName: String {
    return "AuthService"
  }

  /// Unary call to authorize
  ///
  /// - Parameters:
  ///   - request: Request to send to authorize.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authorize(
    _ request: AuthRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<AuthRequest, AuthResponse> {
    return self.makeUnaryCall(
      path: "/AuthService/authorize",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeauthorizeInterceptors() ?? []
    )
  }

  /// Unary call to verifyOtp
  ///
  /// - Parameters:
  ///   - request: Request to send to verifyOtp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func verifyOtp(
    _ request: AuthVerify,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<AuthVerify, AuthResponse> {
    return self.makeUnaryCall(
      path: "/AuthService/verifyOtp",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeverifyOtpInterceptors() ?? []
    )
  }
}

internal protocol AuthServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'authorize'.
  func makeauthorizeInterceptors() -> [ClientInterceptor<AuthRequest, AuthResponse>]

  /// - Returns: Interceptors to use when invoking 'verifyOtp'.
  func makeverifyOtpInterceptors() -> [ClientInterceptor<AuthVerify, AuthResponse>]
}

internal final class AuthServiceClient: AuthServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: AuthServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the AuthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol AuthServiceProvider: CallHandlerProvider {
  var interceptors: AuthServiceServerInterceptorFactoryProtocol? { get }

  func authorize(request: AuthRequest, context: StatusOnlyCallContext) -> EventLoopFuture<AuthResponse>

  func verifyOtp(request: AuthVerify, context: StatusOnlyCallContext) -> EventLoopFuture<AuthResponse>
}

extension AuthServiceProvider {
  internal var serviceName: Substring { return "AuthService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(
    _ methodName: Substring,
    callHandlerContext: CallHandlerContext
  ) -> GRPCCallHandler? {
    switch methodName {
    case "authorize":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeauthorizeInterceptors() ?? []
      ) { context in
        return { request in
          self.authorize(request: request, context: context)
        }
      }

    case "verifyOtp":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeverifyOtpInterceptors() ?? []
      ) { context in
        return { request in
          self.verifyOtp(request: request, context: context)
        }
      }

    default:
      return nil
    }
  }
}

internal protocol AuthServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'authorize'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeauthorizeInterceptors() -> [ServerInterceptor<AuthRequest, AuthResponse>]

  /// - Returns: Interceptors to use when handling 'verifyOtp'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeverifyOtpInterceptors() -> [ServerInterceptor<AuthVerify, AuthResponse>]
}
